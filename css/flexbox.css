/*display	          Specifies the type of box used for an HTML element
flex-direction	    Specifies the direction of the flexible items inside a flex container
justify-content	    Horizontally aligns the flex items when the items do not use all available space on the main-axis
align-items	        Vertically aligns the flex items when the items do not use all available space on the cross-axis
flex-wrap	          Specifies whether the flex items should wrap or not, if there is not enough room for them on one flex line
align-content	      Modifies the behavior of the flex-wrap property. It is similar to align-items, but instead of aligning flex items, it aligns flex lines
flex-flow	          A shorthand property for flex-direction and flex-wrap
order	              Specifies the order of a flexible item relative to the rest of the flex items inside the same container
align-self	        Used on flex items. Overrides the container's align-items property
flex              	A shorthand property for the flex-grow, flex-shrink, and the flex-basis properties*/

span{
  font-size: 20px;
  color:#cecece;
}
*{
  margin: 0;
  padding: 0;
}
.flexbox{
  margin: 0 auto;
  display: flex;
  background-color: cyan;
}
/* <p>A Flexible Layout must have a parent element with the display property set to flex.</p>
<p>
Direct child elements(s) of the flexible container automatically becomes flexible items.
</p> */
.flexbox div,.flex-wrap div,.flex-nowrap div{
  font-size: 30px;
  background-color: lightblue;
  margin: 10px 30px;
  padding: 20px;
}
.flex-column{
  display: flex;
  flex-direction: column;  /*The "flex-direction: column;" stacks the flex items vertically (from top to bottom) */
  background-color: dodgerblue;
}
.flex-column div,.flex-reverse-column div,.flex-reverse-row div,.justify-content div,.align-item div{
  font-size: 30px;
  margin: 10px;
  background-color: #f1f1f1;
  width: 100px;
  line-height: 75px;
  text-align: center;
}
.flex-reverse-column{
  display: flex;
  flex-direction: column-reverse; /*The "flex-direction: column-reverse;" stacks the flex items vertically (but from bottom to top):*/
  background-color: #f80;
}

.flex-reverse-row{
  display: flex;
  flex-direction: row-reverse;; /*The "flex-direction: column-reverse;" stacks the flex items vertically (but from bottom to top):*/
  background-color: lightpink;
}
.flex-wrap{
  display: flex;
  flex-wrap: wrap;
  background-color: cyan;
  width: 250px;
}
.flex-nowrap{
  display: flex;
  flex-wrap: nowrap; /*The nowrap value specifies that the flex items will not wrap (this is default)*/
  background-color: dodgerblue;
  width: 250px;
}

.justify-content{
  display: flex;
   justify-content: center;
  /* justify-content: flex-end; */
   /* justify-content: flex-start;  *//*The flex-start value aligns the flex items at the beginning of the container (this is default):*/
  /* justify-content: space-around; */
  /* justify-content: space-between; */
  background-color: #f80;
}
.align-item{
  height: 400px;
  display: flex;
  /* align-items: center; */
  background-color: lightpink;
  /* align-items: flex-end; */
  /* align-items: flex-start; */
  /* align-items: stretch; */
  align-items: baseline; /*The baseline value aligns the flex items such as their baselines aligns:*/
}
